# Default values for helm-cve-consumer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

# affinity: {}

imagePullSecrets:
  - name: docker-secret

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: topology.kubernetes.io/zone
          labelSelector:
            matchLabels:
              app: deployment-consumer

initContainers:
  - name: wait-for-postgresql
    image: busybox
    imagePullPolicy: IfNotPresent
    command:
      - /bin/sh
      - -c
      - |
        until nc -z cve-webapp-processor-pgpool.namespace3.svc.cluster.local 5432; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 5
        done
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"
  - name: db-migration
    image: bala699/cve-migration:latest
    imagePullPolicy: Always
    env:
      - name: DB_HOST
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_HOST
      - name: DB_PORT
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_PORT
      - name: DB_USER
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_USER
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_PASSWORD
      - name: DB_NAME
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_NAME
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"

containers:
  - name: deployment-container
    image: bala699/cve-consumer:latest
    imagePullPolicy: Always
    env:
      - name: DB_USER
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_USER
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_PASSWORD
      - name: DB_PORT
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_PORT
      - name: DB_HOST
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_HOST
      - name: DB_NAME
        valueFrom:
          secretKeyRef:
            name: db-secret
            key: DB_NAME
      - name: KAFKA_HOST
        valueFrom:
          secretKeyRef:
            name: kafka-secret
            key: KAFKA_HOST
      - name: KAFKA_USER
        valueFrom:
          secretKeyRef:
            name: kafka-secret
            key: KAFKA_USER
      - name: KAFKA_PASSWORD
        valueFrom:
          secretKeyRef:
            name: kafka-secret
            key: KAFKA_PASSWORD
      - name: TOPIC_NAME
        valueFrom:
          secretKeyRef:
            name: kafka-secret
            key: TOPIC_NAME
    resources:
      requests:
        memory: "128Mi"
        cpu: "500m"
      limits:
        memory: "256Mi"
        cpu: "1"

    readinessProbe:
      exec:
        command:
          - /usr/local/bin/db_check.sh
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

    livenessProbe:
      httpGet:
        port: 80
        path: /healthz
      initialDelaySeconds: 5
      periodSeconds: 15
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
